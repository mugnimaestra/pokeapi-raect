{"version":3,"sources":["lib/customHooks.js","lib/api.js","components/PokemonItem.js","components/LoadMore.js","components/PokemonGrid.js","pages/NotFound.js","pages/PokemonDetails.js","App.js","serviceWorker.js","index.js"],"names":["useEventListener","eventName","handler","element","global","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","P","require","Pokedex","protocol","versionPath","cache","timeout","defaultOptions","limit","getPokemonsList","options","getByResources","array","resource","getPokemonByName","name","PokemonItemStyle","styled","div","PokemonItem","types","sprite","typeName","map","pokemon","type","join","src","alt","to","LoadMore","getNextPage","isLoading","loadComponent","loadMore","_","debounce","verge","inViewport","ref","onClick","style","margin","cursor","PokemonGridStyle","PokemonGrid","useState","pokemonsNameList","setPokemonsNameList","pokemonsDetailsList","setPokemonsDetailsList","setIsLoading","filterType","setFilterType","typesList","setTypesList","next","previous","pagination","setPagination","getFirstData","a","then","res","results","getTypesList","getAllTypes","pokemonNameList","url","length","getResources","filteredPokemonDetailsList","filter","some","defaultValue","onChange","e","target","value","handleFilter","key","className","sprites","front_default","NotFound","PokemonDetailsStyle","PokemonDetails","_name","match","params","pokemonData","setPokemonData","getPokemonDetails","id","moves","height","weight","listOfMoves","move","Object","keys","entries","Fragment","App","path","exact","render","props","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23ff1938.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\";\r\n\r\nexport const useEventListener = (eventName, handler, element = global) => {\r\n  const savedHandler = useRef();\r\n\r\n  useEffect(() => {\r\n    savedHandler.current = handler;\r\n  }, [handler]);\r\n\r\n  useEffect(() => {\r\n    const isSupported = element && element.addEventListener;\r\n    if (!isSupported) return;\r\n\r\n    const eventListener = (event) => savedHandler.current(event);\r\n\r\n    element.addEventListener(eventName, eventListener);\r\n\r\n    return () => {\r\n      element.removeEventListener(eventName, eventListener);\r\n    };\r\n  }, [eventName, element]);\r\n};\r\n","// import { Pokedex } from 'pokeapi-js-wrapper';\r\n// import axios from 'axios';\r\nconst Pokedex = require('pokeapi-js-wrapper');\r\n\r\nconst config = {\r\n  protocol: \"https\",\r\n  versionPath: \"/api/v2/\",\r\n  cache: true,\r\n  timeout: 5 * 1000, // 5s\r\n};\r\nconst P = new Pokedex.Pokedex(config);\r\n\r\nconst defaultOptions = {\r\n  limit: 21,\r\n}\r\n\r\nexport const getPokemonsList = (options = defaultOptions) => P.getPokemonsList(options);\r\n\r\nexport const getByResources = (array = []) => P.resource(array);\r\n\r\nexport const getPokemonByName = (name) => P.getPokemonByName(name);\r\n\r\nexport const getTypesList = () => P.getTypesList();","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PokemonItemStyle = styled.div`\r\n  border: 1px solid #000;\r\n  width: 150px;\r\n  height: 170px;\r\n  padding: 1rem;\r\n  margin: 1rem;\r\n  transition: box-shadow ease-in-out 0.3s;\r\n  position: relative;\r\n  &:hover {\r\n    cursor: pointer;\r\n    box-shadow: 5px 5px 0px 0px #000;\r\n  }\r\n  a {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    opacity: 0;\r\n  }\r\n`;\r\n\r\nconst PokemonItem = ({ name, types, sprite }) => {\r\n  const typeName = types.map(pokemon => pokemon.type.name);\r\n  return (\r\n    <PokemonItemStyle>\r\n      <div>Pokemon Name: {name}</div>\r\n      <div>Pokemon Type: {typeName.join(\", \")} </div>\r\n      <img src={sprite} alt=\"default-sprite\" />\r\n      <Link to={`/pokemon/${name}`}>Go to pokemon page</Link>\r\n    </PokemonItemStyle>\r\n  );\r\n}\r\n\r\nexport default PokemonItem;","import React, { useRef } from 'react';\r\nimport verge from 'verge';\r\nimport { useEventListener } from '../lib/customHooks';\r\nimport _ from 'lodash';\r\n\r\nconst LoadMore = ({ getNextPage, isLoading }) => {\r\n  const loadComponent = useRef();\r\n\r\n  const loadMore = _.debounce(() => {\r\n    if (verge.inViewport(loadComponent.current)) {\r\n      getNextPage();\r\n    }\r\n  }, 1000);\r\n\r\n  useEventListener(\"scroll\", loadMore);\r\n\r\n  const style = {\r\n    margin: '1rem',\r\n    cursor: 'pointer',\r\n  }\r\n\r\n  return <div ref={loadComponent} onClick={getNextPage} style={style}>{isLoading ? 'Loading more pokemons....' : 'Click to load more pokemons'}</div>;\r\n};\r\n\r\nexport default LoadMore;","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport styled from 'styled-components';\r\nimport { getPokemonsList, getByResources, getTypesList } from '../lib/api';\r\nimport PokemonItem from '../components/PokemonItem';\r\nimport LoadMore from \"./LoadMore\";\r\n\r\nconst PokemonGridStyle = styled.div`\r\n  .pokemon-container {\r\n    max-width: 720px;\r\n    display: flex;\r\n    align-items: stretch;\r\n    flex-wrap: wrap;\r\n    margin: 0 auto;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst PokemonGrid = () => {\r\n  const [pokemonsNameList, setPokemonsNameList] = useState([]);\r\n  const [pokemonsDetailsList, setPokemonsDetailsList] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [filterType, setFilterType] = useState(\"No filter\");\r\n  const [typesList, setTypesList] = useState([]);\r\n  const [pagination, setPagination] = useState({\r\n    next: null,\r\n    previous: null,\r\n  });\r\n\r\n  // initial data\r\n  useEffect(() => {\r\n    const getFirstData = async () => {\r\n      await getPokemonsList().then((res) => {\r\n        setPagination({\r\n          next: res.next,\r\n          previous: res.previous,\r\n        });\r\n        setPokemonsNameList(res.results);\r\n      });\r\n    };\r\n    const getAllTypes = async () => {\r\n      await getTypesList().then(res => {\r\n        setTypesList(res.results);\r\n      })\r\n    }\r\n    getAllTypes();\r\n    getFirstData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getResources = async () => {\r\n      const pokemonNameList = pokemonsNameList.map((pokemon) => pokemon.url);\r\n      if (pokemonNameList.length > 0) {\r\n        await getByResources(pokemonNameList).then((res) =>\r\n          {\r\n            setPokemonsDetailsList(res);\r\n          }\r\n        );\r\n      }\r\n    };\r\n    getResources();\r\n  }, [pokemonsNameList]);\r\n\r\n  const filteredPokemonDetailsList =\r\n    pokemonsDetailsList.length > 0 && filterType !== \"No filter\"\r\n      ? pokemonsDetailsList.filter((pokemon) => {\r\n          if (filterType === \"No filter\") return pokemon;\r\n          return pokemon.types.some((type) => type.type.name === filterType);\r\n        })\r\n      : pokemonsDetailsList;\r\n\r\n  const getNextPage = async () => {\r\n    setIsLoading(true);\r\n    if (pagination.next) {\r\n      await getByResources([pagination.next]).then(res => {\r\n        setPagination({\r\n          next: res[0].next,\r\n          previous: res[0].previous,\r\n        });\r\n        setPokemonsNameList([\r\n          ...pokemonsNameList,\r\n          ...res[0].results\r\n        ])\r\n        setIsLoading(false);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleFilter = (e) => {\r\n    setFilterType(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <PokemonGridStyle>\r\n      <div>Filter by type:</div>\r\n      <select defaultValue=\"No filter\" onChange={(e) => handleFilter(e)}>\r\n        <option >No filter</option>\r\n        {typesList.map((type) => (\r\n          <option key={type.name}>{type.name}</option>\r\n        ))}\r\n      </select>\r\n      <div className=\"pokemon-container\">\r\n        {filteredPokemonDetailsList.map((pokemon) => {\r\n          return (\r\n            <PokemonItem\r\n              key={pokemon.name}\r\n              name={pokemon.name}\r\n              types={pokemon.types}\r\n              sprite={pokemon.sprites.front_default}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      {pagination.next && <LoadMore isLoading={isLoading} getNextPage={getNextPage} />}\r\n    </PokemonGridStyle>\r\n  );\r\n}\r\n\r\nexport default PokemonGrid;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n\r\n  return (\r\n    <div>\r\n      Page not found\r\n      <Link to=\"/\">\r\n        <button>Go back home</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { getPokemonByName } from '../lib/api';\r\n\r\nconst PokemonDetailsStyle = styled.div`\r\n  border: 1px solid #000;\r\n  width: 600px;\r\n  min-height: 300px;\r\n  margin: 3rem auto;\r\n  .moves-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    li {\r\n      flex: 1 1 20%; /*grow | shrink | basis */\r\n      height: 50px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst PokemonDetails = ({ match: { params: { _name } }}) => {\r\n  const [pokemonData, setPokemonData] = useState({});\r\n  useState(() => {\r\n    const getPokemonDetails = async () => {\r\n      await getPokemonByName(_name).then(res => {\r\n        setPokemonData(res);\r\n      })\r\n    }\r\n    getPokemonDetails();\r\n  }, []);\r\n\r\n  const { name, id, types, moves, height, weight } = pokemonData;\r\n\r\n  const typeName = types ? types.map((pokemon) => pokemon.type.name) : null;\r\n\r\n  const listOfMoves = moves ? moves.map((pokemon) => pokemon?.move?.name) : null;\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/\">Go Back</Link>\r\n      {Object.keys(pokemonData).length > 0 && (\r\n        <PokemonDetailsStyle>\r\n          <br />\r\n          <div>Name: {name}</div>\r\n          <div>ID: {id}</div>\r\n          <div>Height: {height * 10}cm</div>\r\n          <div>Weight: {weight / 10}kg</div>\r\n          <div>Type: {typeName.join(\", \")}</div>\r\n          <br />\r\n          <div>List of sprites:</div>\r\n          {Object.entries(pokemonData.sprites).map((sprite) => {\r\n            if (sprite[1]) {\r\n              return <img key={sprite[0]} src={sprite[1]} alt=\"sprite\" />;\r\n            }\r\n            return <React.Fragment key={sprite[0]}></React.Fragment>;\r\n          })}\r\n          <div>\r\n            List of {name} moves ({listOfMoves.length}):\r\n          </div>\r\n          <div className=\"moves-container\">\r\n            {listOfMoves.map((move) => (\r\n              <li>{move}</li>\r\n            ))}\r\n          </div>\r\n        </PokemonDetailsStyle>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PokemonDetails;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport PokemonGrid from './components/PokemonGrid';\nimport NotFound from './pages/NotFound';\nimport PokemonDetails from './pages/PokemonDetails';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact render={props => <PokemonGrid {...props} />} />\n          <Route path=\"/pokemon/:_name\" component={PokemonDetails} />\n          <Route component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}